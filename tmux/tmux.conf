set -g status-position top
# -- general -------------------------------------------------------------------
set -g default-terminal "xterm-kitty"
set -ga terminal-overrides ",xterm-kitty:Tc"
setw -g xterm-keys on
set -s escape-time 10                     # faster command sequences
set -sg repeat-time 60                   # increase repeat timeout
set -s focus-events on

# set prefix to ctrl+a
set -g prefix C-a

set -g mouse on

# start with window number 1
set -g base-index 1

# Notifying if other windows has activities
setw -g monitor-activity on
set -g visual-activity off

# Renumber windows on window close
set -g renumber-windows on

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'fcsonline/tmux-thumbs'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-contjnuum'
set -g @plugin 'file://~/.config/tmux/colors/rose-pine'

set -g @rose_pine_variant 'moon' # Options are 'main', 'moon' or 'dawn'
set -g @rose_pine_host 'off' 
set -g @rose_pine_disable_active_window_menu 'on' 
set -g @rose_pine_directory 'on'
# set -g @rose_pine_bar_bg_disable "on"
# set -g @rose_pine_show_pane_directory 'on'
set -g @rose_pine_left_separator ':'
set -g @rose_pine_right_separator ' '
set -g @rose_pine_date_time '%H:%M:%S'
set -g @rose_pine_date_time_icon ''

run-shell ~/.tmux/plugins/tmux-thumbs/tmux-thumbs.tmux
set -g @thumbs-position off_left
set -g @thumbs-osc52 0 # so you don't get a blank page
set -g @thumbs-command 'tmux set-buffer -w "{}"'
set -g @thumbs-upcase-command 'tmux set-buffer -w "{}" && tmux paste-buffer'
set -g @thumbs-fg-color '#11111b'
set -g @thumbs-bg-color '#f5e0dc'
set -g @thumbs-hint-fg-color '#d20f39'
set -g @thumbs-hint-bg-color '#f5e0dc'

# color
# set -g status-right '#{tmux_mode_indicator}'
# set -g status-bg '#1e1e2e'
# set -g status-fg '#cdd6f4'
# set -g copy-mode-match-style 'fg=#1e1e2e,bg=#cdd6f4'
# set -g copy-mode-current-match-style 'fg=#1e1e2e,bg=#d20f39'
# set -g pane-border-style 'fg=#45475a'
# set -g pane-active-border-style 'fg=#f9e2af'
# set -g window-status-style 'fg=#585b70'
# set -g window-status-current-style 'fg=#f9e2af'


set -q -g status-utf8 on                  # expect UTF-8 (tmux < 2.2)
setw -q -g utf8 on
set -g history-limit 10000                 # boost history

set -g set-titles on          # set terminal title
set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time
set -g status-interval 10     # redraw status line every 10 seconds

# reload configuration
bind r run '"$TMUX_PROGRAM" ${TMUX_SOCKET:+-S "$TMUX_SOCKET"} source "$TMUX_CONF"' \; display "#{TMUX_CONF} sourced"
bind s choose-tree -swZ
bind w choose-tree -wZ


# 单快捷键切换水平/垂直布局
bind-key -r o run-shell "bash -c 'if tmux display-message -p \"#{window_layout}\" | grep -q \"{\"; then tmux select-layout even-vertical; else tmux select-layout even-horizontal; fi'"
# Tilish
# set -g @tilish-default 'tiled'

# Undercurl
set -g default-terminal "${TERM}"
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
set -as terminal-overrides ',*:Setulc=\E[59::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0

# tmux-continuum & tmux-resurrecrt
set -g @continuum-restore 'off'
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-strategy-nvim 'session'

# --- keys ---
# create session
bind C-c new-session
# find session
bind C-f command-prompt -p find-session 'switch-client -t %%'
# session navigation
bind BTab switch-client -l  # move to last session
# split panes using | and \\
bind | split-window -h
bind \\ split-window -v
unbind '"'
unbind %
# swap current pane with the next one
bind > swap-pane -D
# swap current pane with the previous one
bind < swap-pane -U
bind-key k clear-history
# maximize current pane
bind + run "cut -c3- '#{TMUX_CONF}' | sh -s _maximize_pane '#{session_name}' '#D'"

# bind-key -n C-l send-keys C-l\;  run 'sleep 0.2' \; clear-history
# move and resize
bind-key -n C-h if -F "#{@pane-is-vim}" 'send-keys C-h'  'select-pane -L'
bind-key -n C-j if -F "#{@pane-is-vim}" 'send-keys C-j'  'select-pane -D'
bind-key -n C-k if -F "#{@pane-is-vim}" 'send-keys C-k'  'select-pane -U'
# bind-key -n C-l if -F "#{@pane-is-vim}" 'send-keys C-l'  'select-pane -R'
bind-key -n C-Left if -F "#{@pane-is-vim}" 'send-keys C-Left' 'resize-pane -L 3'
bind-key -n C-Down if -F "#{@pane-is-vim}" 'send-keys C-Down' 'resize-pane -D 3'
bind-key -n C-Up if -F "#{@pane-is-vim}" 'send-keys C-Up' 'resize-pane -U 3'
bind-key -n C-Right if -F "#{@pane-is-vim}" 'send-keys C-Right' 'resize-pane -R 3'
# window navigation
unbind n
unbind p
bind -r C-h previous-window # select previous window
bind -r C-l next-window     # select next window
bind Tab last-window        # move to last active window
# toggle mouse
bind m run "cut -c3- '#{TMUX_CONF}' | sh -s _toggle_mouse"
# -- copy mode -----------------------------------------------------------------
bind Enter copy-mode # enter copy mode
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi C-v send -X rectangle-toggle
bind -T copy-mode-vi y send -X copy-selection-and-cancel
bind -T copy-mode-vi Escape send -X cancel
bind -T copy-mode-vi H send -X start-of-line
bind -T copy-mode-vi L send -X end-of-line
# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# copy to Wayland clipboard
if -b '[ "$XDG_SESSION_TYPE" = "wayland" ] && command -v wl-copy > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | wl-copy"'
# copy to macOS clipboard
if -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | pbcopy"'
# copy to Windows clipboard
if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | clip.exe"'
if -b '[ -c /dev/clipboard ]' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - > /dev/clipboard"'
# -- buffers -------------------------------------------------------------------
bind b list-buffers     # list paste buffers
bind p paste-buffer -p  # paste from the top paste buffer
bind P choose-buffer    # choose which buffer to paste from
# -- 8< ------------------------------------------------------------------------
%if #{==:#{TMUX_PROGRAM},}
  run 'TMUX_PROGRAM="$(LSOF=$(PATH="$PATH:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin" command -v lsof); $LSOF -b -w -a -d txt -p #{pid} -Fn 2>/dev/null | perl -n -e "if (s/^n((?:.(?!dylib$|so$))+)$/\1/g && s/(?:\s+\([^\s]+?\))?$//g) { print; exit } } exit 1; {" || readlink "/proc/#{pid}/exe" 2>/dev/null)"; { [ -f "$TMUX_PROGRAM" ] && [ -x "$TMUX_PROGRAM" ]; } || TMUX_PROGRAM="$(command -v tmux || printf tmux)"; "$TMUX_PROGRAM" -S #{socket_path} set-environment -g TMUX_PROGRAM "$TMUX_PROGRAM"'
%endif
%if #{==:#{TMUX_SOCKET},}
  run '"$TMUX_PROGRAM" -S #{socket_path} set-environment -g TMUX_SOCKET "#{socket_path}"'
%endif
%if #{==:#{TMUX_CONF},}
  run '"$TMUX_PROGRAM" set-environment -g TMUX_CONF $(for conf in "$HOME/.tmux.conf" "$XDG_CONFIG_HOME/tmux/tmux.conf" "$HOME/.config/tmux/tmux.conf"; do [ -f "$conf" ] && printf "%s" "$conf" && break; done)'
%endif

setenv -g TMUX_PLUGIN_MANAGER_PATH "$HOME/.tmux/plugins/"
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run -b '~/.tmux/plugins/tpm/tpm'
